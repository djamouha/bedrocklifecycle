# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  pull_request:
    branches: [main]

jobs:
  formatting-and-linting:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code in the pull request
      - name: 'Checkout source code'
        uses: actions/checkout@v2

      # Cache node_modules to speed up the process
      - name: Restore node_modules cache
        id: cache-npm
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install npm dependencies for Prettier and Jest
      - name: 'Install npm dependencies'
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm install

      # Prettier formatting
      - name: 'Code formatting verification with Prettier'
        run: npm run prettier:verify

      # ESlint
      - name: 'Lint Lightning Web Components'
        run: npm run lint:lwc

      # Install PMD
      - name: Install PMD
        run: wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F6.22.0/pmd-bin-6.22.0.zip && unzip pmd-bin-6.22.0.zip

      # Execute PMD
      - name: Execute PMD
        run: pmd-bin-6.22.0/bin/run.sh pmd -minimumpriority 2 -d force-app -R apex-ruleset.xml -f text -l apex

  scratch-org-test:
    runs-on: ubuntu-latest
    steps:
      # Install Salesforce CLI
      - name: Install Salesforce CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
          mkdir sfdx-cli
          tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
          ./sfdx-cli/install

      # Cache node_modules to speed up the process
      - name: Restore node_modules cache
        id: cache-npm
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install npm dependencies for Prettier and Jest
      - name: 'Install npm dependencies'
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm install

      # Checkout the code in the pull request
      - name: Checkout
        uses: actions/checkout@v2

      # Store secret for dev hub
      - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
        shell: bash
        run: 'echo ${{ secrets.DEVHUB_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt'

      # Authenticate dev hub
      - name: 'Authenticate Dev Hub'
        run: 'sfdx force:auth:sfdxurl:store -f ./DEVHUB_SFDX_URL.txt -a devhub -d'

      # Create scratch org
      - name: 'Create scratch org'
        run: 'sfdx force:org:create -f config/project-scratch-def.json -a scratch-org -s -d 1'

      # Deploy source to scratch org
      - name: 'Push source to scratch org'
        run: 'sfdx force:source:push'

      # Run Apex tests in scratch org
      - name: 'Run Apex tests'
        run: npm run test:apex:coverage

      # Upload Apex code coverage data
      - name: 'Upload Apex code coverage'
        uses: codecov/codecov-action@v1
        with:
          flag: apex

      # Unit tests
      - name: 'Unit test Lightning Web Components'
        run: npm run test:unit:coverage

      # Upload LWC code coverage data
      - name: 'Upload LWC code coverage'
        uses: codecov/codecov-action@v1
        with:
          flag: lwc

      # Housekeeping
      - name: 'Delete scratch org'
        if: always()
        run: 'sfdx force:org:delete -p -u scratch-org'
